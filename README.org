#+TITLE: Ángel Emacs
#+AUTHOR: Nicolas Ortega
#+PROPERTY: header-args:emacs-lisp :tangle ./init.el
#+LANGUAGE: ES
#+STARTUP: showeverything

* Tabla de Contenidos                                                   :TOC:
- [[#prefacio][Prefacio]]
- [[#arreglar-customorg][Arreglar custom.org]]
- [[#eliminar-archivos-temporales][Eliminar archivos temporales]]
- [[#simplificar-yesno][Simplificar "yes/no"]]
- [[#tecla-de-escape][Tecla de escape]]
- [[#configuración-visual-basica][Configuración Visual Basica]]
- [[#administrador-de-paquetes---straightel][Administrador de Paquetes - straight.el]]
- [[#letras][Letras]]
- [[#lenguajes-de-babel][Lenguajes de Babel]]
- [[#corrección][Corrección]]
- [[#teclas][Teclas]]
- [[#alegría-visual][Alegría Visual]]
  - [[#iconos-linea-de-modos-y-temas][Iconos, Linea de Modos y Temas]]
  - [[#emojis][Emojis]]
  - [[#tablero][Tablero]]
- [[#escritura][Escritura]]
- [[#navegación-con-ivy--counsel][Navegación con Ivy & Counsel]]
- [[#simulador-de-vim][Simulador de Vim]]
- [[#hydra][Hydra]]
- [[#manejo-de-proyectos][Manejo de Proyectos]]
- [[#magit][Magit]]
- [[#dired][Dired]]
- [[#treemacs][Treemacs]]
- [[#org][Org]]
  - [[#modos-de-org][Modos de Org]]
  - [[#paquete-org][Paquete Org]]
  - [[#org-toc][Org TOC]]
  - [[#org-modern][Org Modern]]
  - [[#org-fancy-priorities][Org Fancy Priorities]]
  - [[#atajos-de-bloque][Atajos de Bloque]]
  - [[#agenda-todos][Agenda TODOs]]
  - [[#org-hábitos][Org Hábitos]]
  - [[#org-notas-rápidas][Org Notas Rápidas]]
  - [[#org-ajustes-visuales][Org Ajustes Visuales]]
  - [[#org-babel-tangle][Org Babel Tangle]]
- [[#corfu][Corfu]]
- [[#servidores-de-lenguajes--lista-de-sugestiones][Servidores de Lenguajes & Lista de Sugestiones]]
  - [[#orderless][Orderless]]
  - [[#lsp-mode][LSP-Mode]]
  - [[#yasnippet][Yasnippet]]
  - [[#mejoras-de-rendimiento-para-lsp][Mejoras de Rendimiento para LSP]]
- [[#lenguages][Lenguages]]
  - [[#typescript][Typescript]]
  - [[#python][Python]]
- [[#atajos][Atajos]]

* Prefacio
Esta es mi configuración personal de Emacs para uso diario, ya sea para programar o para escribir.

* Arreglar custom.org
#+begin_src emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+end_src

* Eliminar archivos temporales
#+begin_src emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src

* Simplificar "yes/no"
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

* Tecla de escape
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

* Configuración Visual Basica
#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)  ; Disable visible scrollbar
  (tool-bar-mode -1)    ; Disable the toolbar
  (tooltip-mode -1)     ; Disable tooltips
  (set-fringe-mode 10)  ; Give some breathing room

  (menu-bar-mode -1)    ; Disable the menu bar

  (setq visible-bell t) ; Set up the visible bell

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  markdown-mode-hook
                  treemacs-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
#+end_src

* Administrador de Paquetes - straight.el
Tanto "use-package" como "org" son requeridos justo después de inicializar straight.el para prevenir problemas al iniciar Emacs.
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
         (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
  (straight-use-package 'org)


  (setq straight-use-package-by-default t)
#+end_src

* Letras
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :hook
    (text-mode . mixed-pitch-mode))

  (defvar angl/default-font-size 125)
  (set-face-attribute 'default nil :font "Iosevka" :height angl/default-font-size)
  (set-face-attribute 'fixed-pitch nil :font "Iosevka" :height angl/default-font-size)
  (set-face-attribute 'variable-pitch nil :font "Iosevka Comfy Duo" :height angl/default-font-size :weight 'regular)
#+end_src

* Lenguajes de Babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))
#+end_src
* Corrección
#+begin_src emacs-lisp
      (dolist (hook '(text-mode-hook))
        (add-hook hook (lambda () (flyspell-mode 1))))
      (setq ispell-program-name "hunspell")
      (setq ispell-dictionary "es_AR")

  (use-package flyspell-correct
      :after flyspell
      :bind (:map flyspell-mode-map ("C-;" . flyspell-correct-wrapper)))

    (use-package flyspell-correct-ivy
      :after flyspell-correct)
#+end_src

* Teclas
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.2))

  (use-package helpful
    :straight t
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

  (use-package general
    :after evil
    :config
    (general-create-definer angl/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")
    (angl/leader-keys
      "v" '(:ignore t :which-key "toggles")
      "vt" '(counsel-load-theme :which-key "choose theme")))
  (general-define-key
   "C-M-j" 'counsel-switch-buffer)
#+end_src

* Alegría Visual
** Iconos, Linea de Modos y Temas
Siempre usa "11" para el tamaño de fuente al tomar capturas de pantalla.
#+begin_src emacs-lisp
  (use-package all-the-icons
    :straight t
    :if (display-graphic-p))

  (use-package doom-themes)

  (use-package solaire-mode)
  (solaire-global-mode +1)

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

  (use-package doom-modeline
    :straight t
    :hook (after-init . doom-modeline-mode)
    :custom ((doom-modeline-height 35)))

  (straight-use-package
   '(screenshot :type git :host github :repo "tecosaur/screenshot"))

  (load-theme 'doom-solarized-light :no-confirm)
    #+end_src

** Emojis
#+begin_src emacs-lisp
  (use-package emojify
    :hook (after-init . global-emojify-mode))
  (add-hook 'after-init-hook #'global-emojify-mode)
#+end_src

** Tablero
#+begin_src emacs-lisp
  (use-package dashboard
    :straight t
    :init
    (progn
       (setq dashboard-center-content t)
       (setq dashboard-startup-banner "~/Pictures/angel-wings.png")
       (setq dashboard-set-file-icons t)
       (setq dashboard-banner-logo-title "PAX VOBISCUM")
       (setq dashboard-set-heading-icon t))
    :config
    (dashboard-setup-startup-hook))
    (setq dashboard-items '((recents  . 3)
                                 (projects . 3)
                                 (agenda . 3)))
(setq dashboard-footer-messages '("Α Β Ρ Α Κ Α Δ Η Β Ρ Α"))
(setq dashboard-footer-icon (all-the-icons-wicon "sunrise"
                                                   :height 1.1
                                                   :v-adjust -0.05
                                                   :face 'font-lock-keyword-face))
#+end_src

* Escritura
#+begin_src emacs-lisp
  (use-package writeroom-mode)
#+end_src

* Navegación con Ivy & Counsel
#+begin_src emacs-lisp
  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-buffer-history))
    :config
    (setq ivy-initial-inputs-alist nil))
  (use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src

* Simulador de Vim
#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  :config
  (evil-mode 1)
  (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

  ;; Use visual line motions even outside of visual-line-mode buffers
  (evil-global-set-key 'motion "j" 'evil-next-visual-line)
  (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

  (evil-set-initial-state 'messages-buffer-mode 'normal)
  (evil-set-initial-state 'dashboard-mode 'normal))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+end_src

* Hydra
Tengo que configurar Hydra para Git Actions
#+begin_src emacs-lisp
(use-package hydra
  :defer t)

(defhydra hydra-text-scale (:timeout 1)
  "scale text"
  ("j" text-scale-increase "in")
  ("k" text-scale-decrease "out")
  ("f" nil "finished" :exit t))

(angl/leader-keys
  "ts" '(hydra-text-scale/body :which-key "scale text"))
#+end_src

* Manejo de Proyectos
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  (when (file-directory-p "~/Programing")
    (setq projectile-project-search-path '("~/Programing")))
  (setq projectile-switch-project-action #'project-dired))

;; TODO projectile integration with ivy for my projectes using counsel-projectile
;; Do so with C-c p E and set variables like "projectile-project-run-cmd" => spago run or smth
;; Maybe you can set it to complie dwm when editing files in .loca/src/*
;; Load then with M-: (hack-dir-local-variables) inside the project dir (and restart-buffer)

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

* Magit
#+begin_src emacs-lisp
(use-package magit
  :commands magit-status
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1)
  :bind (:map magit-status-mode-map
              ("c" . magit-commit-create)))
#+end_src

* Dired
#+begin_src emacs-lisp
  (use-package dired
    :straight nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :config
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-single-up-directory
      "l" 'dired-single-buffer))

  (use-package dired-single
    :commands (dired dired-jump))

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode)
    :config (setq all-the-icons-dired-monochrome nil))

  (use-package dired-open
    :commands (dired dired-jump)
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("png" . "feh")
                                  ("mkv" . "mpv"))))

#+end_src

* Treemacs
#+begin_src emacs-lisp
  (use-package treemacs)
  (use-package lsp-treemacs
    :after lsp)
  (use-package treemacs-evil
    :after (treemacs evil)
    :straight t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :straight t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :straight t)
  (add-hook 'dired-mode-hook 'treemacs-icons-dired-mode)
  (use-package treemacs-magit
    :after (treemacs magit)
    :straight t)
#+end_src

* Org
** Modos de Org
#+begin_src emacs-lisp
(defun angl/org-mode-setup ()
  (org-indent-mode)
  (variable-pitch-mode 1)
  (visual-line-mode 1))
#+end_src

** Paquete Org
#+begin_src emacs-lisp
  (use-package org
    :hook (org-mode . angl/org-mode-setup)
    :config
    (setq org-ellipsis " ▾")
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time) ;; TODO Maybe change it to "note" to add thoughts on stuff in uni
    (setq org-log-into-drawer t)
    (setq org-agenda-files
          '("~/Org/Tasks.org"
            "~/Org/Cumpleaños.org"
            "~/Org/Habitos.org"))
    org-hide-emphasis-markers t)
#+end_src

** Org TOC
#+begin_src emacs-lisp
  (use-package toc-org)
  (if (require 'toc-org nil t)
      (progn
        (add-hook 'org-mode-hook 'toc-org-mode))
    (warn "toc-org not found"))
#+end_src

** Org Modern
#+begin_src emacs-lisp
  (use-package org-modern)

  (global-org-modern-mode)
  (setq org-modern-star '("✢" "✿" "❁" "✾" "❀" "✤" "❖"))
#+end_src
** Org Fancy Priorities
#+begin_src emacs-lisp
(use-package org-fancy-priorities
  :ensure t
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("⚠" "‼" "❗")))
#+end_src
** Atajos de Bloque
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("s" . "src"))
#+end_src
** Agenda TODOs
#+begin_src emacs-lisp
    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)
  (setq org-todo-keywords
      '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
        (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))

  (setq org-refile-targets
        '(("Archive.org" :maxlevel . 1)
          ("Tasks.org" :maxlevel . 1)))
  ;; Save Org files after refiling
  (advice-add 'org-refile :after 'org-save-all-org-buffers)
#+end_src
** Org Hábitos
#+begin_src emacs-lisp
  ;; MAYBE ADD LATER CAPTURE TEMPLATES
  ;; Configure custom agenda views TODO Traducir todo esto al español
    (setq org-agenda-custom-commands
     '(("d" "Tablero"
       ((agenda "" ((org-deadline-warning-days 7)))
        (todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))
        (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

      ("n" "Next Tasks"
       ((todo "NEXT"
          ((org-agenda-overriding-header "Next Tasks")))))

      ("W" "Work Tasks" tags-todo "+work-email")

      ;; Low-effort next actions
      ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
       ((org-agenda-overriding-header "Low Effort Tasks")
        (org-agenda-max-todos 20)
        (org-agenda-files org-agenda-files)))

      ("w" "Workflow Status"
       ((todo "WAIT"
              ((org-agenda-overriding-header "Waiting on External")
               (org-agenda-files org-agenda-files)))
        (todo "REVIEW"
              ((org-agenda-overriding-header "In Review")
               (org-agenda-files org-agenda-files)))
        (todo "PLAN"
              ((org-agenda-overriding-header "In Planning")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "BACKLOG"
              ((org-agenda-overriding-header "Project Backlog")
               (org-agenda-todo-list-sublevels nil)
               (org-agenda-files org-agenda-files)))
        (todo "READY"
              ((org-agenda-overriding-header "Ready for Work")
               (org-agenda-files org-agenda-files)))
        (todo "ACTIVE"
              ((org-agenda-overriding-header "Active Projects")
               (org-agenda-files org-agenda-files)))
        (todo "COMPLETED"
              ((org-agenda-overriding-header "Completed Projects")
               (org-agenda-files org-agenda-files)))
        (todo "CANC"
              ((org-agenda-overriding-header "Cancelled Projects")
               (org-agenda-files org-agenda-files)))))))
#+end_src
** Org Notas Rápidas
#+begin_src emacs-lisp
  (setq org-capture-templates
      `(("t" "Tareas / Projectos")
        ("tt" "Tarea" entry (file+olp "~/Org/Tasks.org" "Transitorias")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

        ("j" "Entradas de Diario")
        ("jj" "Diario" entry
             (file+olp+datetree "~/Org/Diario.org")
             "\n* %<%I:%M %p> - Diario :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
        ("jm" "Reuniones" entry
             (file+olp+datetree "~/Org/Diario.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

        ("w" "Flujo Laboral")
        ("we" "Revisando Email" entry (file+olp+datetree "~/Org/Diario.org")
             "* Revisando Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

        ("m" "Captura de Matricas")
        ("mw" "Peso" table-line (file+headline "~/Org/Metricas.org" "Weight")
         "| %U | %^{Peso} | %^{Notas} |" :kill-buffer t)))
#+end_src
** Org Ajustes Visuales
#+begin_src emacs-lisp
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("✢" "✿" "❁" "✾" "❀" "✤" "❖")))

    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

  (with-eval-after-load 'org-faces
  (set-face-attribute 'org-document-title nil :font "Iosevka Comfy Duo" :weight 'bold :height 1.3)
  (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Iosevka Comfy Duo" :weight 'regular :height (cdr face))))

  (defun angl/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . angl/org-mode-visual-fill))
#+end_src

** Org Babel Tangle
#+begin_src emacs-lisp
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (file-name-directory (buffer-file-name))
                        (expand-file-name user-emacs-directory))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* Corfu
Sistema de autocompletacion moderna con integración para LSP y Ivy.
#+begin_src emacs-lisp
  (use-package corfu
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-auto-prefix 2)
    (corfu-auto-delay 0.0)
    (corfu-quit-at-boundary 'separator)
    (corfu-echo-documentation 0.25)
    (corfu-preview-current 'insert)
    (corfu-preselect-first nil)
    :bind (:map corfu-map
                ;;("M-SCP"   . corfu-insert-separator)
                ("RET"     . nil)
                ("TAB"     . corfu-next)
                ([tab]     . corfu-next)
                ("S-TAB"   . corfu-previous)
                ([backtab] . corfu-previous)
                ("S-<return>" . corfu-insert))
    :init
    (global-corfu-mode)
    (corfu-popupinfo-mode)
    (corfu-history-mode)
    :config
    (add-hook 'eshell-mode-hook
              (lambda () (setq-local corfu-quit-at-boundary t
                                     corfu-quit-no-match t
                                     corfu-auto nil)
                (corfu-mode))))

  (setq corfu-popupinfo-delay (cons t 0.0))
#+end_src

* Servidores de Lenguajes & Lista de Sugestiones
** Orderless
Se integra con lsp-mode y Corfu para expandir sus habilidades de sugerencias.
#+begin_src emacs-lisp
  (use-package orderless
    :init
    ;; Tune the global completion style settings to your liking!
    ;; This affects the minibuffer and non-lsp completion at point.
    (setq completion-styles '(orderless partial-completion basic)
          completion-category-defaults nil
          completion-category-overrides nil))
#+end_src

** LSP-Mode
Permite usar LSP en Emacs, pero por si no hace nada. Actualmente configurado para usar Corfu y orderless para autocompletamiento.

TODO: Añadir mejoras con cape.el y orderless
#+begin_src emacs-lisp
      (use-package lsp-mode
         :custom
         (lsp-completion-provider :none)
         :commands (lsp lsp-deferred)
         :init
         (defun angl/lsp-mode-setup-completion ()
           (setf (alist-get 'styles (alist-get 'lsp-capf completion-category-defaults))
                 '(orderless)))
         (setq lsp-keymap-prefix "C-c l") ;; Puede ser "C-l" ó "s-l"
         :hook
         (lsp-completion-mode . angl/lsp-mode-setup-completion)
         :config
         (lsp-enable-which-key-integration t))
#+end_src

** Yasnippet
Requerido por LSP.
#+begin_src emacs-lisp
        (use-package yasnippet
          :straight t
          :bind
          ("C-c y s" . yas-insert-snippet)
          ("C-c y v" . yas-visit-snippet-file)
          :config
          (add-to-list 'yas-snippet-dirs "~/.emacs.d/snippets")
          (yas-global-mode 1))

#+end_src

** Mejoras de Rendimiento para LSP
Dos configuraciones que mejoran el rendimiento de LSP en Emacs.
#+begin_src emacs-lisp
         (setq read-process-output-max (* 1024 1024)) ;; 1mb
         (setq gc-cons-threshold 100000000)
#+end_src

* Lenguages
** Typescript
#+begin_src emacs-lisp
  (use-package typescript-mode
    :mode "\\.ts\\'"
    :hook (typescript-mode . lsp-deferred)
    :config
    (setq typescript-indent-level 2))
#+end_src

** Python
#+begin_src emacs-lisp
(use-package lsp-pyright
  :straight t
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp-deferred))))  ; or lsp-deferred
#+end_src

* Atajos
#+begin_src emacs-lisp
  (angl/leader-keys
    ;; Acciones en Org
    "o" '(:ignore t :which-key "Acciones en Org")
    "oA" '(org-agenda :which-key "Abrir Agenda")
    "ot" '(counsel-org-tag :which-key "Añadir Etiquetas")
    "oc" '(org-capture :which-key "Notas Rapidas")
    ;; Herramientas de Escritura     
    "w" '(:ignore t :which-key "Herramientas de Escritura")
    "wr" '(writeroom-mode :which-key "Alternar Modo de Escritura"))
#+end_src
